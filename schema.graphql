### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BlogPage {
  ExcludedTags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
  PageInfo: ComponentLayoutPageInfo
  Slug: String
  Title: String!
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type BlogPageEntity {
  attributes: BlogPage
  id: ID
}

type BlogPageEntityResponse {
  data: BlogPageEntity
}

type BlogPageEntityResponseCollection {
  data: [BlogPageEntity!]!
  meta: ResponseCollectionMeta!
}

input BlogPageFiltersInput {
  ExcludedTags: TagFiltersInput
  Slug: StringFilterInput
  Title: StringFilterInput
  and: [BlogPageFiltersInput]
  createdAt: DateTimeFilterInput
  not: BlogPageFiltersInput
  or: [BlogPageFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input BlogPageInput {
  ExcludedTags: [ID]
  PageInfo: ComponentLayoutPageInfoInput
  Slug: String
  Title: String
  publishedAt: DateTime
}

type BlogPageRelationResponseCollection {
  data: [BlogPageEntity!]!
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type CompanyInfo {
  Email: String!
  Logo: UploadFileEntityResponse!
  Name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type CompanyInfoEntity {
  attributes: CompanyInfo
  id: ID
}

type CompanyInfoEntityResponse {
  data: CompanyInfoEntity
}

type CompanyInfoEntityResponseCollection {
  data: [CompanyInfoEntity!]!
  meta: ResponseCollectionMeta!
}

input CompanyInfoFiltersInput {
  Email: StringFilterInput
  Name: StringFilterInput
  and: [CompanyInfoFiltersInput]
  createdAt: DateTimeFilterInput
  not: CompanyInfoFiltersInput
  or: [CompanyInfoFiltersInput]
  updatedAt: DateTimeFilterInput
}

input CompanyInfoInput {
  Email: String
  Logo: ID
  Name: String
}

type CompanyInfoRelationResponseCollection {
  data: [CompanyInfoEntity!]!
}

type ComponentBlogFeaturedPost {
  FeaturedPostHeading: String
  Post: PostEntityResponse
  id: ID!
}

input ComponentBlogFeaturedPostFiltersInput {
  FeaturedPostHeading: StringFilterInput
  Post: PostFiltersInput
  and: [ComponentBlogFeaturedPostFiltersInput]
  not: ComponentBlogFeaturedPostFiltersInput
  or: [ComponentBlogFeaturedPostFiltersInput]
}

input ComponentBlogFeaturedPostInput {
  FeaturedPostHeading: String
  Post: ID
  id: ID
}

type ComponentBlogPostSelection {
  SelectionHeading: String
  Tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
  id: ID!
}

input ComponentBlogPostSelectionFiltersInput {
  SelectionHeading: StringFilterInput
  Tags: TagFiltersInput
  and: [ComponentBlogPostSelectionFiltersInput]
  not: ComponentBlogPostSelectionFiltersInput
  or: [ComponentBlogPostSelectionFiltersInput]
}

input ComponentBlogPostSelectionInput {
  SelectionHeading: String
  Tags: [ID]
  id: ID
}

type ComponentLayoutButton {
  Label: String!
  Link: String!
  id: ID!
}

input ComponentLayoutButtonFiltersInput {
  Label: StringFilterInput
  Link: StringFilterInput
  and: [ComponentLayoutButtonFiltersInput]
  not: ComponentLayoutButtonFiltersInput
  or: [ComponentLayoutButtonFiltersInput]
}

input ComponentLayoutButtonInput {
  Label: String
  Link: String
  id: ID
}

type ComponentLayoutFooterColumn {
  Content: String
  FooterLinks: MenuEntityResponse
  Heading: String
  id: ID!
}

input ComponentLayoutFooterColumnFiltersInput {
  Content: StringFilterInput
  FooterLinks: MenuFiltersInput
  Heading: StringFilterInput
  and: [ComponentLayoutFooterColumnFiltersInput]
  not: ComponentLayoutFooterColumnFiltersInput
  or: [ComponentLayoutFooterColumnFiltersInput]
}

input ComponentLayoutFooterColumnInput {
  Content: String
  FooterLinks: ID
  Heading: String
  id: ID
}

type ComponentLayoutHeroSection {
  Buttons(filters: ComponentLayoutButtonFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentLayoutButton]
  CallToAction: String!
  Images(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  id: ID!
}

input ComponentLayoutHeroSectionFiltersInput {
  CallToAction: StringFilterInput
  and: [ComponentLayoutHeroSectionFiltersInput]
  not: ComponentLayoutHeroSectionFiltersInput
  or: [ComponentLayoutHeroSectionFiltersInput]
}

input ComponentLayoutHeroSectionInput {
  Buttons: [ComponentLayoutButtonInput]
  CallToAction: String
  Images: [ID]
  id: ID
}

type ComponentLayoutPageInfo {
  Content: String
  Cover: UploadFileEntityResponse
  SeoInformation: ComponentSeoSeoInformation
  id: ID!
}

input ComponentLayoutPageInfoFiltersInput {
  Content: StringFilterInput
  and: [ComponentLayoutPageInfoFiltersInput]
  not: ComponentLayoutPageInfoFiltersInput
  or: [ComponentLayoutPageInfoFiltersInput]
}

input ComponentLayoutPageInfoInput {
  Content: String
  Cover: ID
  SeoInformation: ComponentSeoSeoInformationInput
  id: ID
}

type ComponentSeoSeoInformation {
  SeoDescription: String
  SeoTitle: String
  id: ID!
}

input ComponentSeoSeoInformationFiltersInput {
  SeoDescription: StringFilterInput
  SeoTitle: StringFilterInput
  and: [ComponentSeoSeoInformationFiltersInput]
  not: ComponentSeoSeoInformationFiltersInput
  or: [ComponentSeoSeoInformationFiltersInput]
}

input ComponentSeoSeoInformationInput {
  SeoDescription: String
  SeoTitle: String
  id: ID
}

type ComponentServicesServicesPreview {
  Services(filters: ServiceFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ServiceRelationResponseCollection
  id: ID!
}

input ComponentServicesServicesPreviewFiltersInput {
  Services: ServiceFiltersInput
  and: [ComponentServicesServicesPreviewFiltersInput]
  not: ComponentServicesServicesPreviewFiltersInput
  or: [ComponentServicesServicesPreviewFiltersInput]
}

input ComponentServicesServicesPreviewInput {
  Services: [ID]
  id: ID
}

type ContentPage {
  PageInfo: ComponentLayoutPageInfo
  Slug: String!
  Title: String!
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type ContentPageEntity {
  attributes: ContentPage
  id: ID
}

type ContentPageEntityResponse {
  data: ContentPageEntity
}

type ContentPageEntityResponseCollection {
  data: [ContentPageEntity!]!
  meta: ResponseCollectionMeta!
}

input ContentPageFiltersInput {
  Slug: StringFilterInput
  Title: StringFilterInput
  and: [ContentPageFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: ContentPageFiltersInput
  or: [ContentPageFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input ContentPageInput {
  PageInfo: ComponentLayoutPageInfoInput
  Slug: String
  Title: String
  publishedAt: DateTime
}

type ContentPageRelationResponseCollection {
  data: [ContentPageEntity!]!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

type Error {
  code: String!
  message: String
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

type Footer {
  FooterColumn(filters: ComponentLayoutFooterColumnFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentLayoutFooterColumn]
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type FooterEntity {
  attributes: Footer
  id: ID
}

type FooterEntityResponse {
  data: FooterEntity
}

type FooterEntityResponseCollection {
  data: [FooterEntity!]!
  meta: ResponseCollectionMeta!
}

input FooterFiltersInput {
  and: [FooterFiltersInput]
  createdAt: DateTimeFilterInput
  not: FooterFiltersInput
  or: [FooterFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input FooterInput {
  FooterColumn: [ComponentLayoutFooterColumnInput]
  publishedAt: DateTime
}

type FooterRelationResponseCollection {
  data: [FooterEntity!]!
}

union GenericMorph = BlogPage | CompanyInfo | ComponentBlogFeaturedPost | ComponentBlogPostSelection | ComponentLayoutButton | ComponentLayoutFooterColumn | ComponentLayoutHeroSection | ComponentLayoutPageInfo | ComponentSeoSeoInformation | ComponentServicesServicesPreview | ContentPage | Footer | HomePage | I18NLocale | Menu | Post | SeoConfiguration | Service | ServicesPage | Tag | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type HomePage {
  BlogSelection: [HomePageBlogSelectionDynamicZone]!
  HomeHero: ComponentLayoutHeroSection
  SeoInformation: ComponentSeoSeoInformation
  ServicesPreview: ComponentServicesServicesPreview
  Title: String
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

union HomePageBlogSelectionDynamicZone = ComponentBlogFeaturedPost | ComponentBlogPostSelection | Error

scalar HomePageBlogSelectionDynamicZoneInput

type HomePageEntity {
  attributes: HomePage
  id: ID
}

type HomePageEntityResponse {
  data: HomePageEntity
}

type HomePageEntityResponseCollection {
  data: [HomePageEntity!]!
  meta: ResponseCollectionMeta!
}

input HomePageFiltersInput {
  Title: StringFilterInput
  and: [HomePageFiltersInput]
  createdAt: DateTimeFilterInput
  not: HomePageFiltersInput
  or: [HomePageFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input HomePageInput {
  BlogSelection: [HomePageBlogSelectionDynamicZoneInput!]
  HomeHero: ComponentLayoutHeroSectionInput
  SeoInformation: ComponentSeoSeoInformationInput
  ServicesPreview: ComponentServicesServicesPreviewInput
  Title: String
  publishedAt: DateTime
}

type HomePageRelationResponseCollection {
  data: [HomePageEntity!]!
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type Menu {
  CodeName: String!
  Links(filters: ComponentLayoutButtonFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentLayoutButton]
  Name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type MenuEntity {
  attributes: Menu
  id: ID
}

type MenuEntityResponse {
  data: MenuEntity
}

type MenuEntityResponseCollection {
  data: [MenuEntity!]!
  meta: ResponseCollectionMeta!
}

input MenuFiltersInput {
  CodeName: StringFilterInput
  Name: StringFilterInput
  and: [MenuFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: MenuFiltersInput
  or: [MenuFiltersInput]
  updatedAt: DateTimeFilterInput
}

input MenuInput {
  CodeName: String
  Links: [ComponentLayoutButtonInput]
  Name: String
}

type MenuRelationResponseCollection {
  data: [MenuEntity!]!
}

type Mutation {
  createContentPage(data: ContentPageInput!): ContentPageEntityResponse
  createMenu(data: MenuInput!): MenuEntityResponse
  createPost(data: PostInput!): PostEntityResponse
  createService(data: ServiceInput!): ServiceEntityResponse
  createTag(data: TagInput!): TagEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteBlogPage: BlogPageEntityResponse
  deleteCompanyInfo: CompanyInfoEntityResponse
  deleteContentPage(id: ID!): ContentPageEntityResponse
  deleteFooter: FooterEntityResponse
  deleteHomePage: HomePageEntityResponse
  deleteMenu(id: ID!): MenuEntityResponse
  deletePost(id: ID!): PostEntityResponse
  deleteSeoConfiguration: SeoConfigurationEntityResponse
  deleteService(id: ID!): ServiceEntityResponse
  deleteServicesPage: ServicesPageEntityResponse
  deleteTag(id: ID!): TagEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Update an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateBlogPage(data: BlogPageInput!): BlogPageEntityResponse
  updateCompanyInfo(data: CompanyInfoInput!): CompanyInfoEntityResponse
  updateContentPage(data: ContentPageInput!, id: ID!): ContentPageEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateFooter(data: FooterInput!): FooterEntityResponse
  updateHomePage(data: HomePageInput!): HomePageEntityResponse
  updateMenu(data: MenuInput!, id: ID!): MenuEntityResponse
  updatePost(data: PostInput!, id: ID!): PostEntityResponse
  updateSeoConfiguration(data: SeoConfigurationInput!): SeoConfigurationEntityResponse
  updateService(data: ServiceInput!, id: ID!): ServiceEntityResponse
  updateServicesPage(data: ServicesPageInput!): ServicesPageEntityResponse
  updateTag(data: TagInput!, id: ID!): TagEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type Post {
  Content: String!
  Cover: UploadFileEntityResponse
  PostSEO: ComponentSeoSeoInformation
  Slug: String!
  Title: String!
  createdAt: DateTime
  publishedAt: DateTime
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
  updatedAt: DateTime
}

type PostEntity {
  attributes: Post
  id: ID
}

type PostEntityResponse {
  data: PostEntity
}

type PostEntityResponseCollection {
  data: [PostEntity!]!
  meta: ResponseCollectionMeta!
}

input PostFiltersInput {
  Content: StringFilterInput
  Slug: StringFilterInput
  Title: StringFilterInput
  and: [PostFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: PostFiltersInput
  or: [PostFiltersInput]
  publishedAt: DateTimeFilterInput
  tags: TagFiltersInput
  updatedAt: DateTimeFilterInput
}

input PostInput {
  Content: String
  Cover: ID
  PostSEO: ComponentSeoSeoInformationInput
  Slug: String
  Title: String
  publishedAt: DateTime
  tags: [ID]
}

type PostRelationResponseCollection {
  data: [PostEntity!]!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  blogPage(publicationState: PublicationState = LIVE): BlogPageEntityResponse
  companyInfo: CompanyInfoEntityResponse
  contentPage(id: ID): ContentPageEntityResponse
  contentPages(filters: ContentPageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ContentPageEntityResponseCollection
  footer(publicationState: PublicationState = LIVE): FooterEntityResponse
  homePage(publicationState: PublicationState = LIVE): HomePageEntityResponse
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  menu(id: ID): MenuEntityResponse
  menus(filters: MenuFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MenuEntityResponseCollection
  post(id: ID): PostEntityResponse
  posts(filters: PostFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PostEntityResponseCollection
  seoConfiguration: SeoConfigurationEntityResponse
  service(id: ID): ServiceEntityResponse
  services(filters: ServiceFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ServiceEntityResponseCollection
  servicesPage(publicationState: PublicationState = LIVE): ServicesPageEntityResponse
  tag(id: ID): TagEntityResponse
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type SeoConfiguration {
  DefaultDescription: String!
  DefaultSeoImage: UploadFileEntityResponse!
  DefaultTitle: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type SeoConfigurationEntity {
  attributes: SeoConfiguration
  id: ID
}

type SeoConfigurationEntityResponse {
  data: SeoConfigurationEntity
}

type SeoConfigurationEntityResponseCollection {
  data: [SeoConfigurationEntity!]!
  meta: ResponseCollectionMeta!
}

input SeoConfigurationFiltersInput {
  DefaultDescription: StringFilterInput
  DefaultTitle: StringFilterInput
  and: [SeoConfigurationFiltersInput]
  createdAt: DateTimeFilterInput
  not: SeoConfigurationFiltersInput
  or: [SeoConfigurationFiltersInput]
  updatedAt: DateTimeFilterInput
}

input SeoConfigurationInput {
  DefaultDescription: String
  DefaultSeoImage: ID
  DefaultTitle: String
}

type SeoConfigurationRelationResponseCollection {
  data: [SeoConfigurationEntity!]!
}

type Service {
  Description: String!
  Image: UploadFileEntityResponse
  Name: String!
  Preview: String!
  Slug: String!
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type ServiceEntity {
  attributes: Service
  id: ID
}

type ServiceEntityResponse {
  data: ServiceEntity
}

type ServiceEntityResponseCollection {
  data: [ServiceEntity!]!
  meta: ResponseCollectionMeta!
}

input ServiceFiltersInput {
  Description: StringFilterInput
  Name: StringFilterInput
  Preview: StringFilterInput
  Slug: StringFilterInput
  and: [ServiceFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: ServiceFiltersInput
  or: [ServiceFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input ServiceInput {
  Description: String
  Image: ID
  Name: String
  Preview: String
  Slug: String
  publishedAt: DateTime
}

type ServiceRelationResponseCollection {
  data: [ServiceEntity!]!
}

type ServicesPage {
  ExcludedServices(filters: ServiceFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ServiceRelationResponseCollection
  PageInfo: ComponentLayoutPageInfo
  Slug: String!
  Title: String!
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type ServicesPageEntity {
  attributes: ServicesPage
  id: ID
}

type ServicesPageEntityResponse {
  data: ServicesPageEntity
}

type ServicesPageEntityResponseCollection {
  data: [ServicesPageEntity!]!
  meta: ResponseCollectionMeta!
}

input ServicesPageFiltersInput {
  ExcludedServices: ServiceFiltersInput
  Slug: StringFilterInput
  Title: StringFilterInput
  and: [ServicesPageFiltersInput]
  createdAt: DateTimeFilterInput
  not: ServicesPageFiltersInput
  or: [ServicesPageFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input ServicesPageInput {
  ExcludedServices: [ID]
  PageInfo: ComponentLayoutPageInfoInput
  Slug: String
  Title: String
  publishedAt: DateTime
}

type ServicesPageRelationResponseCollection {
  data: [ServicesPageEntity!]!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

type Tag {
  Name: String!
  Slug: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type TagEntity {
  attributes: Tag
  id: ID
}

type TagEntityResponse {
  data: TagEntity
}

type TagEntityResponseCollection {
  data: [TagEntity!]!
  meta: ResponseCollectionMeta!
}

input TagFiltersInput {
  Name: StringFilterInput
  Slug: StringFilterInput
  and: [TagFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: TagFiltersInput
  or: [TagFiltersInput]
  updatedAt: DateTimeFilterInput
}

input TagInput {
  Name: String
  Slug: String
}

type TagRelationResponseCollection {
  data: [TagEntity!]!
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
